Bootstrap: library
From: ubuntu:18.04

####
#
# Authors:      Chris Wood, EPCC, University of Edinburgh <c.wood@epcc.ed.ac.uk>; James Harle, National Oceanography Centre <jdha@noc.ac.uk>
# Date:         2019-09-06
# Last updated: 2020-21-04
#
#   Unresolved issues / future work:
#       - significant testing needed - does OpenMPI version on Cirrus need to the same as version in this def file?
#       - do we _need_ to (should we) run all available `make [check|test]` for dependencies?
#       - did I waste a lot of time working out how to compile dependencies from source? (David H suggested that some apt binaries might work, despite my comment below!)
#       - we could change the workflow of all of this by creating individual docker files of all the dependencies (with same base OS image, probably something minimal? alpine?),
#         doing a multistage build, and creating the singularity container from the final resultant docker container. Singularity doensn't (yet) allow multistage builds
#           - however, it's not possible to pull multiple docker images in 1 recipe, so would need to do an incremental build which is probably too much effort for any benefit it would provide  
#       - one of the issues I had running `make check` for hdf5 was with running it as root - mpiexec complains about this. I created the nemo user to run (with the side effect that
#         it created a useful location - the home directory - to store some of the dependencies!). But I then had issues with adding the hdf5 libraries to search paths used by NetCDF, nemo, and xios,
#         so changed --prefix from /home/nemo/hdf5 to /usr/local, but you can't install stuff to there without being root (or sudo, which isn't directly supported in a container). Way round it would be
#         build in /home/nemo as nemo, then install as root, and switch back to nemo user? Is it worth it? But only need to worry about this if we want to run `make check`. Also had similar issues with
#         NCDIR and NFDIR for NetCDF install directories (changed from /home/nemo/netcdf/install to /usr/local). If there's a way round it (and there's a reason to do it), then LD_LIBRARY_PATH and PATH
#         will need to be set and updated
#
#         I also thought it would be useful to keep all the 3rd party dependencies in a separate place, rather than /usr/local, but maybe that's just being a bit OCD...
#       - the nemo-singularity repo is currently private, so need to supply a username/password
#       - I keep the def file in a different repo to the singularity nemo build because it is a different thing - someone running `singularity build` doesn't need the whole singularity-nemo repo (apart from
#         inside the container) 
#
#       - note I currently change branch in the nemo singularity repo rather than use master
####

#%files
#    /home/cwood/.ssh/authorized_keys /root/.ssh/authorized_keys

%post

    ##
    # Compilation from source necessary where apt-get binaries weren't compiled with necessary dependencies
    # for XIOS and NEMO
    ##

    # install basic stuff

    ##
    # Although my original order worked when just testing the commands, when building as a container, I had locales and python errors (and the build was killed)
    # unless I set locales[-all] separately and installed python first
    ##

    apt-get install -y locales #locales-all
    locale-gen en_GB en_GB.UTF-8 # en_US en_US.UTF-8

    apt-get install -y software-properties-common
    add-apt-repository universe
    apt-get update

    # n.b. 
    #   - libcurl4-openssl-dev also installs libcurl4 (as does curl, if not already installed)
    #   - zlib already installed
    apt-get install -y python \
                       subversion \
                       wget \
                       git \
                       make \
                       m4 \
                       gcc \
                       gfortran \
                       g++ \
                       liburi-perl \
                       libcurl4-openssl-dev \
                       curl \
                       zlib1g-dev \
                       # build-essential # can't remember why I had this, but it's not needed - any advantage to installing anyway?

    apt-get install -y libibverbs-dev 


    
    # these were dependencies that Michael Bareford installed in his example Singularity container - do we need them? (https://www.wiki.ed.ac.uk/display/EPCC/Building+a+Container)
    #    apt-get install -y build-essential uuid-dev libssl-dev libseccomp-dev libgpgme11-dev iputils-ping squashfs-tools wget git pkg-config m4 gfortran zlib1g-dev vim-tiny bc libibverbs-dev
            
    ###
    # softlink gmake to make
    ###

    ln -s /usr/bin/make /usr/bin/gmake

    # compiling openmpi from source
    mkdir -p /opt/openmpi-4.0.1 && cd $_
    wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz
    tar -xvzf openmpi-4.0.1.tar.gz
    rm openmpi-4.0.1.tar.gz
    
    cd openmpi-4.0.1
    ./configure CC=gcc CXX=g++ FC=gfortran --enable-mpi1-compatibility --prefix=/opt/openmpi-4.0.1/install --with-verbs
    make
    make install
    cd ..
    rm -r openmpi-4.0.1 # removes the 303 mb directory

    # add user `nemo` - mpiexec in hdf5 `make check` complains if run as root (although we might end up not running make check)
    adduser --disabled-password --gecos "" nemo

    WORK_DIR=/nemo >> $SINGULARITY_ENVIRONMENT
    mkdir $WORK_DIR
    chown nemo:nemo -R $WORK_DIR
    cd $WORK_DIR

    # compile HDF5 libraries
    mkdir -p /opt/hdf5 && cd $_ # mkdir /home/nemo/hdf5
    #cd /opt/hdf5
    wget -O hdf5.tar.gz "https://www.hdfgroup.org/package/hdf5-1-10-5-tar-gz/?wpdmdl=13571&refresh=5d94c86107ca21570031713"
    tar xzvf hdf5.tar.gz
    rm hdf5.tar.gz
    H5DIR=/opt/hdf5/install # /usr/local # /home/nemo/hdf5/install
    cd hdf5-1.10.5/
    # n.b. --enable-fortran specifically not needed (https://www.unidata.ucar.edu/software/netcdf/docs/getting_and_building_netcdf.html#build_default)
    CC=/opt/openmpi-4.0.1/install/bin/mpicc ./configure --prefix=${H5DIR} --enable-hl --enable-parallel 
    make
    # maybe we shouldn't bother with make check - it complains about a lot and we're not actually building on a parallel file system
    # so some of the checks are totally irrelevant
    # make check -i RUNPARALLEL='-oversubscribe'
    make install
    cd .. 
    rm -r hdf5-1.10.5 # removes the 212 mb directory

    # and add this symlink (for xios / nemo) - can't do ln as nemo user
    #not needed if on path
    ln -s /opt/openmpi-4.0.1/install/bin/mpif90 /usr/bin/mpif90

    # and LD_LIBRARY_PATH
    LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH
    #LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

    ##
    # hmm, maybe netCDF doesn't like anything being anywhere but /usr/local...
    # but: I wanted to install hdf5 library locally because make check runs mpiexec, which complains if it's run as root
    # ... but non-root can't install to /usr/local?
    ##

    ##
    # FIXED! (I think) ... I originally had NCDIR and NFDIR as /home/nemo/netcdf/install but even adding this to PATH and LD_LIBRARY_LINK didn't seem to work
    ##

    # compile NetCDF libs
    mkdir -p /opt/netcdf && cd $_ # mkdir -p /home/nemo/netcdf
    #cd $WORK_DIR
    #cd /opt/netcdf
    wget -O netcdf.tar.gz https://github.com/Unidata/netcdf-c/archive/v4.7.1.tar.gz
    tar xzvf netcdf.tar.gz
    rm netcdf.tar.gz 
    
    cd netcdf-c-4.7.1 
    NCDIR=/opt/netcdf/install #/usr/local
    
    CC=/opt/openmpi-4.0.1/install/bin/mpicc FC=/opt/openmpi-4.0.1/install/bin/mpifort CPPFLAGS="-I${H5DIR}/include" LDFLAGS="-L${H5DIR}/lib" ./configure --disable-shared --prefix=$NCDIR
    make
    # make check fails; again - maybe we should avoid running it (only 1 response from a question on the netcdf mailing list, saying it is really finicky) 
    # make check
    make install
    cd .. 
    rm -r netcdf-c-4.7.1 # removes the 125 mb directory

    ## and the fortran libraries
    wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.2.tar.gz
    tar xzvf v4.5.2.tar.gz
    rm v4.5.2.tar.gz
    cd netcdf-fortran-4.5.2
    NFDIR=/opt/netcdf/install #/usr/local
    
    CC=/opt/openmpi-4.0.1/install/bin/mpicc FC=/opt/openmpi-4.0.1/install/bin/mpifort CPPFLAGS="-I${NCDIR}/include -I${H5DIR}/include" LDFLAGS="-L${NCDIR}/lib -L${H5DIR}/lib" LIBS="-lhdf5 -lhdf5_hl -lcurl" ./configure --prefix=$NFDIR --disable-shared
    make
    make install
    cd ..
    rm -r netcdf-fortran-4.5.2 # removes the 18 mb directory

    # Actually - when we build a container, everything in the container is the same as the user outside the container - since building needs sudo, then this will be root
    # Changing to su nemo here has no effect

    #su nemo

    # WORK_DIR=/nemo >> $SINGULARITY_ENVIRONMENT # superfluous...
    PATH=$PATH:/opt/openmpi-4.0.1/install/bin:/opt/hdf5/install/bin
    # this is needed for the NEMO and XIOS build scripts 
    #PATH=$PATH:/opt/openmpi-4.0.1/install/bin

    ##
    # Now we can install NEMO
    ##

    cd $WORK_DIR

    # These GIT_SSH_COMMAND options prevent prompts. Since we're root, not the user on the host who will (probably) have the SSH agent, we also need to pass the SSH_AUTH_SOCK environment
    # variable: SINGULARITYENV_SSH_AUTH_SOCK=$SSH_AUTH_SOCK
    GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone git@github.com:NOC-MSM/singularity-nemo.git
    
    cd singularity-nemo

    # dev branch
    git checkout gyre_singularity

    cd scripts
    ./nemo_setup_gyre -x /nemo -w /nemo -s /nemo/singularity-nemo

    mkdir /opt/nemo
    mv /nemo/nemo/cfgs/GYRE_PISCES/EXP00/nemo /opt/nemo/

    mkdir /opt/xios
    mv /nemo/nemo/cfgs/GYRE_PISCES/EXP00/xios_server.exe /opt/xios/xios

    chown -Rv nemo:nemo /nemo /opt
    chmod -Rv 777 /nemo /opt

    apt-get clean # removes ~ 150 mb

    # Good practice to remove the authorized_keys of the host user we used to clone the nemo singularity repo 
#    rm /root/.ssh/authorized_keys


%environment
    
    #export ZDIR=/usr/local
    #export NCDIR=/usr/local
    #export NFDIR=/usr/local
    #export WORK_DIR=/nemo
    #export H5DIR=/usr/local
    #export PATH=$PATH:/opt/openmpi-4.0.1/install/bin:/usr/local
    #export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

    # do we need to add mpi lib?
    # Add nemo / xios 
    #PATH=/
    # this is probably needed...
    export LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH

%runscript
    #!/bin/bash

    # This runscript will take 2 arguments: program to run (NEMO or XIOS), and an output directory. By default, the output directory will be the job id (passed using $SLURM_JOB_ID).    

    # create directory so we can symlink to /nemo/nemo/cfgs/GYRE_PISCES/EXP00/
    # we should allow an output directory, and manage this in a cleanup section of the batch script, before deleting the symlinked directory there

    # Improvements:
    #   - update when we use a generic cfg directory
    #   - is using $SLURM_JOB_ID directly here best, or should we pass it as the 2nd argument to the script and use a more generic variable here?
    #   - we could make the arguments a bit more intelligent; e.g.
    #       - if only 1 argument, check whether it's nemo or xios; if neither then it's an output directory (and run nemo in attached mode)

    if ! [[ $1 == "nemo" || $1 == "xios" ]]    
    then
      echo "The program argument should be either 'nemo' or 'xios'"
      exit 1
    fi

    results_dir=$2

    if [[ -z $2 ]]
    then
      results_dir=$SLURM_JOB_ID
    fi

    if [[ -z $results_dir ]]
    then
        echo "Please supply an output directory"
        exit 1
    fi

    if [[ ! -d $results_dir ]]
    then
        mkdir $results_dir && cd $_

        for file in /nemo/nemo/cfgs/GYRE_PISCES/EXP00/*
        do
            ln -s $file
        done
    else
        cd $2
    fi

    if [[ $1 == 'nemo' ]]
    then
        /opt/nemo/nemo
    else
        /opt/xios/xios
    fi

%labels
    Author c.wood@epcc.ed.ac.uk
    Version v0.0.1

%help
    The definition file used to create this container builds NEMO, XIOS, and the following dependencies from source:
        - OpenMPI (4.0.1)
        - HDF5 (1.10.5)
        - NetCDF C (4.7.1) and Fortran (4.5.2) libraries 

    This container includes XIOS v2.5 and a GYRE_PISCES build of NEMO

    To build the container, run

        singularity build nemo.sif nemo.def

    To build, it requires you to have read access to the NOC-MSM `singularity-nemo` repository. If you have SSH access set up, you can pass the SSH_AUTH_SOCK environment variable to 
    prevent being prompted for your username and password, by building as

        sudo SINGULARITYENV_SSH_AUTH_SOCK=$SSH_AUTH_SOCK singularity build nemo.sif nemo.def

    The resulting container has one mandatory and on optional arugments: the program to run with that instance (nemo or xios), and an output directory name. If submitted as part of a slurm 
    sunmission, the output directory name will, by default, be the job id

    # more info about running mpi with examples, e.g.

    # mpirun -npernode 1 -n 1 --mca orte_base_help_aggregate 0 --mca btl_vader_single_copy_mechanim none --mca btl ^sm --mca btl_openib_allow_ib true --bind-to core singularity -d exec -B /etc/libibverbs.d --env LD_LIBRARY_PATH=/opt/hdf5/install/lib:$LD_LIBRARY_PATH --pwd $HOME/containers/nemo/cfgs/GYRE_PISCES/EXP00 nemo.sif /opt/nemo/nemo : -N 1 -n 1 singularity exec --pwd $HOME/containers/nemo/cfgs/GYRE_PISCES/EXP00 nemo.sif /nemo/nemo/cfgs/GYRE_PISCES/EXP00/xios_server.exe 
